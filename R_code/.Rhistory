library(osmr)
install.packages("osrm")
library(sf)
library(httr)
library(osmdata)
url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle"
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
quartiere <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
plot <- ggplot(data = quartiere) +
geom_sf(aes(fill = qnr)) +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
response <- GET(url)
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
quartiere <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
plot <- ggplot(data = quartiere) +
geom_sf(aes(fill = qnr)) +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
url <- "https://www.ogd.stadt-zuerich.ch/wms/geoportal/Sammelstelle"
response <- GET(url)
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
quartiere <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
plot <- ggplot(data = quartiere) +
geom_sf(aes(fill = qnr)) +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
View(response)
View(response)
url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle?service=WFS&version=1.1.0&request=GetFeature&outputFormat=GeoJSON&typename=poi_sammelstelle_att"
response <- GET(url)
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
quartiere <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
plot <- ggplot(data = quartiere) +
geom_sf(aes(fill = qnr)) +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
library(tidyverse)
url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle?service=WFS&version=1.1.0&request=GetFeature&outputFormat=GeoJSON&typename=poi_sammelstelle_att"
response <- GET(url)
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
quartiere <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
plot <- ggplot(data = quartiere) +
geom_sf(aes(fill = qnr)) +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
# Karte plotten
plot <- ggplot(data = quartiere) +
geom_sf() +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
quartiere <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
plot <- ggplot(data = quartiere) +
geom_sf() +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
library(sf)
library(osmdata)
library(httr)
library(tidyverse)
url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle?service=WFS&version=1.1.0&request=GetFeature&outputFormat=GeoJSON&typename=poi_sammelstelle_att"
response <- GET(url)
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
quartiere <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
plot <- ggplot(data = quartiere) +
geom_sf() +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
# Karte plotten
# Assuming sammelstellen is in EPSG:4326 (WGS84)
plot <- ggplot(data = sammelstellen) +
geom_sf() +
coord_sf(crs = st_crs(21781)) +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich") +
theme(legend.position = "bottom")
# Karte anzeigen
print(plot)
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
# Karte plotten
# Assuming sammelstellen is in EPSG:4326 (WGS84)
plot <- ggplot(data = sammelstellen) +
geom_sf() +
coord_sf(default_crs = NULL) +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich") +
theme(legend.position = "bottom")
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
sammelstellen <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
# Assuming sammelstellen is in EPSG:4326 (WGS84)
plot <- ggplot(data = sammelstellen) +
geom_sf() +
coord_sf(default_crs = NULL) +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich") +
theme(legend.position = "bottom")
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle"
response <- GET(url)
# Überprüfen, ob der Download erfolgreich war
if (status_code(response) == 200) {
# Inhalt als Text extrahieren und als sf-Objekt einlesen
geojson_data <- content(response, "text")
sammelstellen <- st_read(geojson_data, quiet = TRUE)
# Karte plotten
# Assuming sammelstellen is in EPSG:4326 (WGS84)
plot <- ggplot(data = sammelstellen) +
geom_sf() +
coord_sf(default_crs = NULL, lims_method = "geometry_bbox") +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich") +
theme(legend.position = "bottom")
# Karte anzeigen
print(plot)
print("Daten erfolgreich heruntergeladen und Karte erstellt.")
} else {
print("Fehler beim Herunterladen der Daten.")
}
if (status_code(response) == 200) {
# Read the GeoJSON content
geojson_data <- content(response, "text")
sammelstellen <- st_read(geojson_data, quiet = TRUE)
# Check and set CRS if necessary
if (is.na(st_crs(sammelstellen))) {
st_crs(sammelstellen) <- 2056  # EPSG:2056 is CH1903+ / LV95, the new Swiss CRS
}
# Transform to WGS84 for better compatibility with ggplot2
sammelstellen_wgs84 <- st_transform(sammelstellen, 4326)
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
coord_sf(crs = 4326) +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
# Display the plot
print(plot)
print("Data successfully downloaded and map created.")
} else {
print("Error downloading the data.")
}
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
coord_sf(default_crs = NULL
theme_minimal() +
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
coord_sf(default_crs = NULL)
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
source("~/projects/msc_thesis/R-test/API_call_test.R", echo=TRUE)
# Correct URL for GeoJSON output
url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle"
response <- GET(url)
if (status_code(response) == 200) {
# Read the GeoJSON content
geojson_data <- content(response, "text")
sammelstellen <- st_read(geojson_data, quiet = TRUE)
# Check and set CRS if necessary
if (is.na(st_crs(sammelstellen))) {
st_crs(sammelstellen) <- 2056  # EPSG:2056 is CH1903+ / LV95, the new Swiss CRS
}
# Transform to WGS84 for better compatibility with ggplot2
sammelstellen_wgs84 <- st_transform(sammelstellen, 4326)
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
coord_sf(default_crs = NULL)
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
# Display the plot
print(plot)
print("Data successfully downloaded and map created.")
} else {
print("Error downloading the data.")
}
# Correct URL for GeoJSON output
url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle"response <- GET(url)
if (status_code(response) == 200) {
# Read the GeoJSON content
geojson_data <- content(response, "text")
sammelstellen <- st_read(geojson_data, quiet = TRUE)
# Check and set CRS if necessary
if (is.na(st_crs(sammelstellen))) {
st_crs(sammelstellen) <- 2056  # EPSG:2056 is CH1903+ / LV95, the new Swiss CRS
}
# Transform to WGS84 for better compatibility with ggplot2
sammelstellen_wgs84 <- st_transform(sammelstellen, 4326)
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
coord_sf(default_crs = NULL)
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
# Display the plot
print(plot)
print("Data successfully downloaded and map created.")
} else {
print("Error downloading the data.")
}
response <- GET(url)
if (status_code(response) == 200) {
# Read the GeoJSON content
geojson_data <- content(response, "text")
sammelstellen <- st_read(geojson_data, quiet = TRUE)
# Check and set CRS if necessary
if (is.na(st_crs(sammelstellen))) {
st_crs(sammelstellen) <- 2056  # EPSG:2056 is CH1903+ / LV95, the new Swiss CRS
}
# Transform to WGS84 for better compatibility with ggplot2
sammelstellen_wgs84 <- st_transform(sammelstellen, 4326)
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
coord_sf(default_crs = NULL)
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
# Display the plot
print(plot)
print("Data successfully downloaded and map created.")
} else {
print("Error downloading the data.")
}
str(sammelstellen)
View(sammelstellen)
View(sammelstellen_wgs84)
View(sammelstellen)
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
View(sammelstellen_wgs84)
str(sammelstellen)
print(st_crs(sammelstellen))
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
coord_sf(4326)
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
sammelstellen_points <- sammelstellen_valid %>%
st_cast("POINT")
sammelstellen_valid <- sammelstellen %>%
filter(!st_is_empty(geometry))
sammelstellen_points <- sammelstellen_valid %>%
st_cast("POINT")
if (status_code(response) == 200) {
# Read the GeoJSON content
geojson_data <- content(response, "text")
sammelstellen <- st_read(geojson_data, quiet = TRUE)
# Check and set CRS if necessary
if (is.na(st_crs(sammelstellen))) {
st_crs(sammelstellen) <- 2056  # EPSG:2056 is CH1903+ / LV95, the new Swiss CRS
}
# Transform to WGS84 for better compatibility with ggplot2
sammelstellen_wgs84 <- st_transform(sammelstellen, 4326)
# Create the plot
plot <- ggplot(data = sammelstellen_wgs84) +
geom_sf() +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
# Display the plot
print(plot)
print("Data successfully downloaded and map created.")
} else {
print("Error downloading the data.")
}
ggplot(data = sammelstellen_points) +
geom_sf() +
coord_sf(datum = st_crs(21781)) +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
ggplot(data = sammelstellen_wgs84) +
geom_sf() +
coord_sf(datum = st_crs(4326)) +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
ggplot(data = sammelstellen_points) +
geom_sf() +
coord_sf(datum = st_crs(21781)) +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
ggplot(data = sammelstellen_points) +
geom_sf() +
coord_sf(datum = st_crs(21781)) +
theme_minimal() +
labs(title = "Recycling Collection Points in Zurich")
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
# URL of the dataset
url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle?service=WFS&version=1.1.0&request=GetFeature&outputFormat=GeoJSON&typename=poi_sammelstelle_view"
# Send a GET request to the URL
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Determine the content type to set the appropriate file extension
content_type <- headers(response)$`content-type`
if (grepl("application/geo+json", content_type)) {
file_name <- "sammelstelle.geojson"
} else if (grepl("text/csv", content_type)) {
file_name <- "sammelstelle.csv"
} else {
stop("Unsupported file format.")
}
# Write the content to a file
writeBin(content(response, "raw"), file_name)
message("Data downloaded successfully as ", file_name, ".")
} else {
stop("Failed to download data. Status code: ", status_code(response))
}
source("~/projects/msc_thesis/git_repo/R_code/main.R", echo=TRUE)
View(response)
wfs_url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle"
wfs_client <- WFSClient$new(wfs_url, serviceVersion = "1.0.0")
wfs_client$getFeatureTypes(pretty = TRUE)
library(ows4R)
install.packages("ows4R")
library(ows4R)
wfs_url <- "https://www.ogd.stadt-zuerich.ch/wfs/geoportal/Sammelstelle"
wfs_client <- WFSClient$new(wfs_url, serviceVersion = "1.0.0")
wfs_client$getFeatureTypes(pretty = TRUE)
# Request zusammenstellen
layer = "poi_sammelstelle_view"
url <- parse_url(wfs_url)
url$query <- list(service = "WFS",
version = "1.0.0",
typename = layer,
request = "GetFeature")
request <- build_url(url)
View(url)
View(response)
View(url)
res <- sf::st_read(request)
View(res)
# Als simple feature collection in R vorhanden
res
# Als simple feature collection in R vorhanden
plot <- ggplot(data = quartiere) +
geom_sf(aes(fill = qnr)) +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich",
fill = "Quartier-Nr.") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
# Als simple feature collection in R vorhanden
plot <- ggplot(data = res) +
geom_sf() +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
library(tidyverse)
# Als simple feature collection in R vorhanden
plot <- ggplot(data = res) +
geom_sf() +
theme_minimal() +
labs(title = "Statistische Quartiere der Stadt Zürich") +
theme(legend.position = "bottom")+
scale_fill_viridis_c()
print(plot)
View(res)
sammelstelle_geo <- sf::st_read(request)
# Calculate the mean coordinates for the initial map center
map_center <- st_coordinates(st_centroid(st_union(sammelstelle_geo))) / 1000  # Adjust if necessary
# Create a leaflet map
leaflet_map <- leaflet(sammelstelle_geo) %>%
addTiles() %>%
setView(lng = mean(st_coordinates(sammelstelle_geo)[,1]),
lat = mean(st_coordinates(sammelstelle_geo)[,2]),
zoom = 13) %>%
addCircleMarkers(
~st_coordinates(.)[,1],
~st_coordinates(.)[,2],
radius = 5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.7,
popup = ~name  # Replace 'name' with the appropriate column for popups
)
View(res)
View(res)
source("~/projects/msc_thesis/git_repo/R_code/test_wfs_api.R", echo=TRUE)
View(sammelstelle_geo)
View(sammelstelle_geo)
source("~/projects/msc_thesis/git_repo/R_code/test_wfs_api.R", echo=TRUE)
saveWidget(leaflet_map, file="my_map.html")
library(htmlwidgets)
saveWidget(leaflet_map, file="my_map.html")
